\documentclass[12pt]{article}
\usepackage{graphicx} % Required for inserting images
\usepackage[left=2cm, right=2cm, top=2cm, bottom=2cm]{geometry}

\title{Rapport Systèmes Distribués:\\Sujet 15 : Algorithmes d’élection}
\author{THIRION Paul,\\ MKAVAVO Eddin  }
\date{January 2024}

\begin{document}

\maketitle

\newpage
%====================
\section{Introduction}
\paragraph{Le but de ce rapport est de servir de compte rendu de l'implémentation de l'algorythme de Chang Roberts. Cette implémentation à été faite via Akka. Nous aborderont l'interêt de cet algorythme, ses avantages théoriques et obsvervés, ainsi que ses limites. \\L'algorithme de Chang-Robertsest un algorithme de sélection de leader dans un réseau distribué. Cet algorithme a été développé par Leslie Lamport, Robert Shostak et Marshall Pease dans les années 1980. Il est conçu pour résoudre le problème de l'élection d'un nœud comme leader unique parmi un ensemble de nœuds dans un réseau sans utiliser de communication globale ou de coordonnateur centralisé.}
\paragraph{L'algorithme de Chang-Roberts est une amélioration par rapport à l'algorithme de LeLann, qui est un autre algorithme d'élection de leader. L'une des principales améliorations de l'algorithme de Chang-Roberts réside dans sa simplicité et son efficacité. Il utilise un mécanisme de vote basé sur une numérotation des nœuds et une communication entre pairs pour élire un leader de manière décentralisée. Contrairement à l'algorithme de LeLann, l'algorithme de Chang-Roberts ne nécessite pas de communication globale pour fonctionner, ce qui le rend plus adapté aux réseaux distribués massivement parallèles.}
\paragraph{L'algorithme de Chang-Roberts est particulièrement pertinent dans les situations où il faut élire un leader dans un réseau distribué sans avoir besoin d'une autorité centrale. Il trouve des applications dans divers domaines, notamment la conception de systèmes distribués, les réseaux de capteurs, les réseaux pair-à-pair (P2P) et même dans des contextes de modélisation d'acteurs tels qu'avec Akka.}

%===================
\section{Le sujet}
\subsection{Enjeux}
\paragraph{Avec la multiplication des systèmes distribuées, des problématiques se font ressentir dans différents secteurs d'activitées. Prenoms comme exemple un système de P2P simple.}
\paragraph{Un réseau pair-à-pair (P2P) est un réseau informatique décentralisé où chaque nœud du réseau agit à la fois en tant que client et en tant que serveur pour les autres nœuds. Ces réseaux sont conçus pour permettre le partage direct de ressources telles que des fichiers, des données, des services, etc., entre les pairs sans nécessiter de serveurs centraux. Par nature, ce genre de réseau ne possède pas de machine centrale dédiée. Cependant, il est nécessaire de pouvoir élire, même temporairement, un nœud qui sera responsable et hiérarchiquement supérieur. Cette élection doit se faire de manière décentralisée.}
\paragraph{Supposons que nous avons un réseau P2P où chaque pair a la capacité de collecter des informations sur les ressources disponibles et de les partager avec d'autres pairs. Cependant, pour assurer une coordination efficace, nous avons besoin d'un pair responsable de surveiller l'état global du réseau, de gérer les connexions, de prendre des décisions, ou même de gérer la découverte de nouveaux pairs. Tout acteur n'a pas besoin de faire ces opérations, cela serait couteux à l'echelle du reseau.}

\subsection{L'algorythme de Chang Roberts}
\paragraph{Pour fonctionner, l'algorythme necessite quelques prérequis.}
\begin{itemize}
    \item Le reseau d'acteur doit être un reseau en anneau
    \item Chaque acteur doit avoir un identifiant qui lui est unique dans le réseau
\end{itemize}

\paragraph{Le schéma en Figure\ref{fig:AnneauBasique} (voir annexe) représente l'état d'un réseau avant l'élection d'un leader. Chaque acteur connaît l'un de ses voisins et son identifiant unique.
\\
L'algorithme peut se décomposer en 3 phases distinctes :\\
Une première phase serait une phase d'envoi (voir Figure\ref{fig:AnneauPhaseEnvoi} annexes). Pendant cette phase, les différents acteurs vont envoyer leur identifiant à l'unique voisin connu. Si rien n'interrompt le message contenant un identifiant, ce dernier fera un tour complet de l'anneau pour revenir à son expéditeur.
\\
Lorsqu'un acteur reçoit un message (voir Figure\ref{fig:AnneauPhaseReception} de l'annexe), il comparera son identifiant unique avec le code reçu via le message de son prédécesseur. Si son identifiant est plus grand, alors il enverra un message à son suivant, en remplaçant le code par son identifiant. Si son identifiant est plus petit, alors il fera suivre le message à son suivant en conservant le code initial.
\\
Si le code reçu est égal à l'identifiant de l'acteur, alors cela veut dire que ce dernier a récupéré le message qu'il a lui-même envoyé, et qu'il n'existe pas d'acteur avec un identifiant plus grand que le sien dans le réseau. Cet acteur est donc le nouveau leader et va envoyer un message pour l'annoncer aux autres acteurs (Figure\ref{fig:AnneauPhaseElection} de l'annexe). Ainsi, le leader est élu dans le réseau.
\\
Pour résumer le principe, il s'agit "simplement" d'élire l'acteur avec le plus grand identifiant du réseau comme leader. Ainsi seul un acteur se revendiquera leader si les identifiants sont bien unique.}
%==================
\section{Implémentation}
\subsection{Mise en place}

\subsection{Actor}

\subsection{Compilation}

\subsection{Bibliothèque}

\subsection{Utilisation}
%==================
\section{Résultats et performances}
\subsection{Comparaison sur nombre d'acteurs}
\section{Pour finir}
\subsection{Avantages /!/}
\paragraph{/!/ Compléxité en linéaire $O(n)$}
\subsection{Limites/!/}
\paragraph{/!/ Sensible aux coupures réseaux}
\subsection{Conclusions /!/}
\paragraph{/!/ Chang roberts bien mais autre algo intéressant qui peuvent couvrire les limites de celui si \\
/!/Algorithme de Suzuki-Kasami : Cet algorithme est conçu pour fonctionner dans des environnements de réseaux distribués asynchrones. Il est utilisé pour l'élection de leader dans des systèmes où la communication entre les acteurs peut être retardée ou imprévisible.\\
/!/Algorithme de Maekawa : L'algorithme de Maekawa est adapté aux situations où plusieurs acteurs doivent être élus simultanément comme leaders, par exemple dans les systèmes de tolérance aux fautes. Il réduit la complexité de la communication en autorisant chaque acteur à voter pour plusieurs candidats.\\}


\newpage
\section{ANNEXES}
\begin{figure}[ht]
    \centering
    \includegraphics[width=1\linewidth]{noimage.png}
    \caption{Reseau acteur basique}
    \label{fig:AnneauBasique}
\end{figure}

\begin{figure}[ht]
    \centering
    \includegraphics[width=1\linewidth]{noimage.png}
    \caption{Reseau acteur initialisation leader phase envoi}
    \label{fig:AnneauPhaseEnvoi}
\end{figure}

\begin{figure}[ht]
    \centering
    \includegraphics[width=1\linewidth]{noimage.png}
    \caption{Reseau acteur initialisation leader phase reception}
    \label{fig:AnneauPhaseReception}
\end{figure}

\begin{figure}[ht]
    \centering
    \includegraphics[width=1\linewidth]{noimage.png}
    \caption{Reseau acteur initialisation leader phase election}
    \label{fig:AnneauPhaseElection}
\end{figure}
\end{document}
